{"version":3,"sources":["logo.svg","components/Card.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Card","meal","useState","error","setError","isLoaded","setIsLoaded","recipeInfo","setRecipeInfo","pic","setPic","recipeURL","setRecipeURL","recipeCals","setRecipeCals","ingredientList","setIngredients","recipeYield","setYield","mealType","cals","Math","round","calories","useEffect","url","fetch","then","res","json","result","hits","recipe","label","image","ingredientLines","yield","console","log","calAdjusted","ingredientsFormatted","ingredient","push","className","href","target","src","Search","action","method","type","placeholder","name","App","search","window","location","query","URLSearchParams","get","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c2e7f72.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect} from 'react';\nimport './Card.css'\n//import getTitle from '../util/util.js'\n\n\nconst Card = (meal) =>{\n    \n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [recipeInfo, setRecipeInfo] = useState(null);\n    const [pic, setPic] = useState(null);\n    const [recipeURL, setRecipeURL] = useState(null);\n    const [recipeCals, setRecipeCals] = useState(null);\n    const[ingredientList, setIngredients] = useState([]);\n    const[recipeYield, setYield] = useState(null);\n    var mealType = meal.meal;\n    var cals = Math.round(meal.calories/3);\n    useEffect(() => {\n        \n        var url = (`https://api.edamam.com/api/recipes/v2?type=public&q=${mealType}&app_id=3847eb33&app_key=22baeebe4abfb12d66370d02a9e23939&calories=${cals-50}-${cals+50}&random=true`);\n\n        fetch(url)\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              setRecipeInfo(result.hits[0].recipe.label);\n              setPic(result.hits[0].recipe.image);\n              setRecipeURL(result.hits[0].recipe.url);\n              setIngredients(result.hits[0].recipe.ingredientLines);\n              setRecipeCals(result.hits[0].recipe.calories);\n              setYield(result.hits[0].recipe.yield);\n              console.log(recipeYield);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n          )\n      }, [])\n\n  var calAdjusted = Math.round(recipeCals/recipeYield);\n      \n      if (error) {\n        return <div>API limit reached. Wait a couple seconds and try again</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } \n      else\n      {\n        const ingredientsFormatted = [];\n        for(const ingredient of ingredientList)\n        {\n            ingredientsFormatted.push(<p>â€¢ {ingredient}</p>);\n        }\n        return (\n        <> \n            <p className=\"meal-title\">{mealType}</p>\n            <a href={recipeURL} target=\"_blank\">\n            <div className = \"card\">\n                <div>\n                    <img src={pic} className = \"image\"></img>\n                    <p className = \"title-card\">{recipeInfo}</p>\n                    <p className = \"title-card\">{calAdjusted} Calories ({recipeYield} servings)</p>\n                    \n                    <div className=\"ingredient-list\">{ingredientsFormatted}</div>\n                    \n                </div>\n               \n            </div>\n            \n            </a>\n            \n        </>\n      )\n      }\n}\n\n\n\nexport default Card\n","import React, { useState, useEffect} from 'react';\nimport './Search.css'\n\n\nconst Search = () =>{\n        return (\n        <> \n            <form action=\"/Meal-Planner/\" method=\"get\">\n                <input \n                    type='text' \n                    placeholder=\"Enter your daily calorie goal...\" \n                    className=\"calorie-bar\"\n                    name=\"calories\"></input>\n                <button type=\"submit\" className=\"button\">Find Recipes</button>\n            </form>\n        </>\n      )\n}\n\n\n\nexport default Search\n","import logo from './logo.svg';\nimport './App.css';\nimport Card from './components/Card.js'\nimport Search from './components/Search.js'\n \n\nfunction App() {\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get('calories');\n\n  return (\n    <>\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n       \n\n\n        <p className=\"title\">\n          Calorie Counter Meal Planner\n        </p>\n        <Search/>\n\n        <div className = \"float-container\">\n          <div>\n            <Card\n            meal= \"Breakfast\"\n            calories = {query}\n            />\n          </div>\n          <div>\n            <Card\n            meal = \"Lunch\"\n            calories = {query}\n            />\n          </div>\n          <div>\n            <Card\n            meal = \"Dinner\"\n            calories = {query}\n            />\n          </div>\n        </div>\n        \n      </header>\n\n    </div>\n    </>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}